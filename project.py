
"""AIProjectFinal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q9DpbTFOfrha_v_oVTz5dlWWxq494JKM
"""

import tensorflow as tf
from tensorflow.keras.models import load_model
import numpy as np
import cv2
import matplotlib.pyplot as plt

model = load_model("facial_expression_model.h5")

emotion_labels = ['Anger', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']

def preprocess_image(image_path):
    
    img = cv2.imread(image_path)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)  
    img = cv2.resize(img, (48, 48))  
    img = img.reshape(1, 48, 48, 1)  
    img = img / 255.0  
    return img

def predict_expression(image):
    prediction = model.predict(image)
    predicted_class = np.argmax(prediction, axis=1)[0]  
    return emotion_labels[predicted_class]

def main():
   
    image_path = input("Enter the path to the image: ")

    image = preprocess_image(image_path)

    emotion = predict_expression(image)
    print(f"Predicted Emotion: {emotion}")

    img = cv2.imread(image_path)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) 
    plt.imshow(img)
    plt.title(f"Predicted Emotion: {emotion}")
    plt.axis('off')
    plt.show()


if __name__ == "__main__":
    main()

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.model_selection import train_test_split
import numpy as np
import pandas as pd
import cv2
import os
import matplotlib.pyplot as plt

df = pd.read_csv("/content/ckextended.csv")
X, y = [], []
for i in range(len(df)):
    pixels = np.array(df["pixels"][i].split(), dtype='float32').reshape(48, 48, 1)
    X.append(pixels)
    y.append(df["emotion"][i])

X = np.array(X) / 255.0  
y = np.array(y)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

num_classes = len(set(y))
y_train = tf.keras.utils.to_categorical(y_train, num_classes)
y_test = tf.keras.utils.to_categorical(y_test, num_classes)


model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(48, 48, 1)),
    MaxPooling2D(2,2),
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Conv2D(128, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(num_classes, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

history = model.fit(X_train, y_train, epochs=25, batch_size=64, validation_data=(X_test, y_test))

accuracy = model.evaluate(X_test, y_test)[1] * 100
print(f"Test Accuracy: {accuracy:.2f}%")


model.save("facial_expression_model.h5")

import pandas as pd
import numpy as np
import os
import cv2

df = pd.read_csv("ckextended.csv")  
output_dir = "C:/dataset_images"
os.makedirs(output_dir, exist_ok=True)

for index, row in df.iterrows():
    pixels = np.array(row["pixels"].split(), dtype=np.uint8).reshape(48, 48)  # Reshape to 48x48
    label = str(row["emotion"])  
    label_dir = os.path.join(output_dir, label)
    os.makedirs(label_dir, exist_ok=True)
    img_path = os.path.join(label_dir, f"image_{index}.png")
    cv2.imwrite(img_path, pixels)

    if index % 100 == 0:
        print(f"Saved {index} images...")

print("Image conversion completed!")